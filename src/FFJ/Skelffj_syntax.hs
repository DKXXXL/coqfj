module FFJ.Skelffj_syntax where

-- Haskell module generated by the BNF converter

import FFJ.Absffj_syntax
import FFJ.ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transCDef :: CDef -> Result
transCDef x = case x of
  CDDecl cd  -> failure x
  CDRef cr  -> failure x


transCD :: CD -> Result
transCD x = case x of
  CDecl id0 id fds kd mds  -> failure x


transCR :: CR -> Result
transCR x = case x of
  CRef id fds kr mds mrs  -> failure x


transFD :: FD -> Result
transFD x = case x of
  FDecl id0 id  -> failure x


transKD :: KD -> Result
transKD x = case x of
  KDecl id fields args assignments  -> failure x


transKR :: KR -> Result
transKR x = case x of
  KRef id fields args assignments  -> failure x


transField :: Field -> Result
transField x = case x of
  Field id0 id  -> failure x


transFormalArg :: FormalArg -> Result
transFormalArg x = case x of
  FormalArg id0 id  -> failure x


transArg :: Arg -> Result
transArg x = case x of
  Arg id  -> failure x


transAssignment :: Assignment -> Result
transAssignment x = case x of
  Assignment id0 id  -> failure x


transMD :: MD -> Result
transMD x = case x of
  MethodDecl id0 id formalargs term  -> failure x


transMR :: MR -> Result
transMR x = case x of
  MethodRef id0 id formalargs term  -> failure x


transTerm :: Term -> Result
transTerm x = case x of
  TermVar id  -> failure x
  TermFieldAccess term id  -> failure x
  TermMethodInvoc term id terms  -> failure x
  TermObjectCreation id terms  -> failure x
  TermCast id term  -> failure x


transId :: Id -> Result
transId x = case x of
  Identifier str  -> failure x




-- Class Declaration

CProgram . Program ::= [ClassDecl] Exp;

CDecl . ClassDecl ::= "class" Id "extends" ClassName "{" [FieldDecl] Constructor [MethodDecl] "}" ;

-- Fields Declaration
FDecl . FieldDecl ::= ClassName Id ";" ;

-- Constructor Declaration
KDecl . Constructor ::= Id "(" [FieldParam] ")" "{" "super" "(" [Argument] ")" ";" [Assignment] "}" ;

Field . FieldParam ::= ClassName Id ;
FArg . FormalArg ::= ClassName Id;
Arg . Argument ::= Id ;
Assgnmt . Assignment ::= "this" "." Id "=" Id ";" ;

-- Method Declaration
MDecl . MethodDecl ::= ClassName Id "(" [FormalArg] ")" "{" "return" Exp ";" "}" ;

ExpVar . Exp ::= Var ;
ExpFieldAccess . Exp ::= Exp "." Id ; 
ExpMethodInvoc . Exp ::= Exp "." Id "(" [Exp] ")" ;
ExpCast . Exp ::= "(" ClassName ")" Exp ;
ExpNew . Exp ::= "new" Id "(" [Exp] ")" ;

This . Var ::= "this" ;
VarId . Var ::= Id ; 

token Id (letter (letter | digit | '_')*) ;

ClassObject . ClassName ::= "Object" ;
ClassId . ClassName ::= Id ;

separator ClassDecl "" ;
separator FieldDecl "" ;
separator MethodDecl "" ;
separator FieldParam "," ;
separator FormalArg "," ;
separator Argument "," ;
separator Assignment "" ;
separator Exp "," ;


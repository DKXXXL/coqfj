-- Class Declaration

CProgram . Program ::= [ClassDecl] Exp;

CDecl . ClassDecl ::= "class" Id "extends" ClassName "{" [FieldDecl] Constructor [MethodDecl] "}" ;

-- Fields Declaration
FDecl . FieldDecl ::= ClassName Id ";" ;

-- Constructor Declaration
KDecl . Constructor ::= Id "(" [Field] ")" "{" "super" "(" [Arg] ")" ";" [Assignment] "}" ;

Field . Field ::= ClassName Id ;
FormalArg . FormalArg ::= ClassName Id;
Arg . Arg ::= Id ;
Assignment . Assignment ::= "this" "." Id "=" Id ";" ;

-- Method Declaration
MethodDecl . MethodDecl ::= ClassName Id "(" [FormalArg] ")" "{" "return" Term ";" "}" ;

TermVar . Term ::= Id ;
TermFieldAccess . Term ::= Term "." Id ; 
TermMethodInvoc . Term ::= Term "." Id "(" [Term] ")" ;
TermExp . Term ::= Exp ;

CastExp . Exp ::= "(" ClassName ")" Term ;
NewExp . Exp ::= "new" Id "(" [Term] ")" ;

token Id (letter (letter | digit | '_')*) ;

ClassObject . ClassName ::= "Object" ;
ClassId . ClassName ::= Id ;

separator ClassDecl "" ;
separator FieldDecl "" ;
separator MethodDecl "" ;
separator Field "," ;
separator FormalArg "," ;
separator Arg "," ;
separator Assignment "" ;
separator Term "," ;


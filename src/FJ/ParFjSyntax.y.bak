-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module FJ.ParFjSyntax where
import FJ.AbsFjSyntax
import FJ.LexFjSyntax
import FJ.ErrM

}

%name pCD CD
%name pFD FD
%name pKD KD
%name pFields Fields
%name pID ID
%name pAssignments Assignments
%name pMD MD
%name pTerm Term
%name pId Id
%name pListFD ListFD
%name pListMD ListMD
%name pListFields ListFields
%name pListID ListID
%name pListAssignments ListAssignments
%name pListTerm ListTerm
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '(' { PT _ (TS _ 1) }
  ')' { PT _ (TS _ 2) }
  ',' { PT _ (TS _ 3) }
  '.' { PT _ (TS _ 4) }
  ';' { PT _ (TS _ 5) }
  '=' { PT _ (TS _ 6) }
  'class' { PT _ (TS _ 7) }
  'extends' { PT _ (TS _ 8) }
  'new' { PT _ (TS _ 9) }
  'return' { PT _ (TS _ 10) }
  'super' { PT _ (TS _ 11) }
  'this' { PT _ (TS _ 12) }
  '{' { PT _ (TS _ 13) }
  '}' { PT _ (TS _ 14) }

L_quoted { PT _ (TL $$) }


%%

String  :: { String }  : L_quoted {  $1 }

CD :: { CD }
CD : 'class' Id 'extends' Id '{' ListFD KD ListMD '}' { FJ.AbsFjSyntax.CDecl $2 $4 $6 $7 (reverse $8) }
FD :: { FD }
FD : Id Id { FJ.AbsFjSyntax.FDecl $1 $2 }
KD :: { KD }
KD : Id '(' ListFields ')' '{' 'super' '(' ID ')' ';' ListAssignments ';' '}' { FJ.AbsFjSyntax.KDecl $1 $3 $8 $11 }
Fields :: { Fields }
Fields : Id Id { FJ.AbsFjSyntax.Field $1 $2 }
ID :: { ID }
ID : Id { FJ.AbsFjSyntax.Id $1 }
Assignments :: { Assignments }
Assignments : 'this' '.' Id '=' Id { FJ.AbsFjSyntax.Assignment $3 $5 }
MD :: { MD }
MD : Id Id '(' ListFields ')' '{' 'return' Term ';' '}' { FJ.AbsFjSyntax.MethodDecl $1 $2 $4 $8 }
Term :: { Term }
Term : Id { FJ.AbsFjSyntax.TermVar $1 }
     | Term '.' Id { FJ.AbsFjSyntax.TermFieldAccess $1 $3 }
     | Term '.' Id '(' ListTerm ')' { FJ.AbsFjSyntax.TermMethodInvoc $1 $3 $5 }
     | 'new' Id '(' ListTerm ')' { FJ.AbsFjSyntax.TermObjectCreation $2 $4 }
     | '(' Id ')' Term { FJ.AbsFjSyntax.TermCast $2 $4 }
Id :: { Id }
Id : String { FJ.AbsFjSyntax.Identifier $1 }
ListFD :: { [FD] }
ListFD : {- empty -} { [] }
       | FD { (:[]) $1 }
       | FD ';' ListFD { (:) $1 $3 }
ListMD :: { [MD] }
ListMD : {- empty -} { [] } | ListMD MD { flip (:) $1 $2 }
ListFields :: { [Fields] }
ListFields : {- empty -} { [] }
           | Fields { (:[]) $1 }
           | Fields ',' ListFields { (:) $1 $3 }
ListID :: { [ID] }
ListID : {- empty -} { [] }
       | ID { (:[]) $1 }
       | ID ',' ListID { (:) $1 $3 }
ListAssignments :: { [Assignments] }
ListAssignments : {- empty -} { [] }
                | Assignments { (:[]) $1 }
                | Assignments ';' ListAssignments { (:) $1 $3 }
ListTerm :: { [Term] }
ListTerm : {- empty -} { [] }
         | Term { (:[]) $1 }
         | Term ',' ListTerm { (:) $1 $3 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}


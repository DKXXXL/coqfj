-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParFfjSyntax where
import AbsFfjSyntax
import LexFfjSyntax
import ErrM

}

%name pCD CD
%name pFD FD
%name pKD KD
%name pFL FL
%name pMULTFL MULTFL
%name pIDL IDL
%name pMULTID MULTID
%name pTHISATTRL THISATTRL
%name pMDL MDL
%name pMULTMETHODS MULTMETHODS
%name pMD MD
%name pTerm Term
%name pTL TL
%name pMultipleTerms MultipleTerms
%name pId Id
%name pEMPTYL EMPTYL
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '(' { PT _ (TS _ 1) }
  ')' { PT _ (TS _ 2) }
  ',' { PT _ (TS _ 3) }
  '.' { PT _ (TS _ 4) }
  ';' { PT _ (TS _ 5) }
  '=' { PT _ (TS _ 6) }
  'class' { PT _ (TS _ 7) }
  'extends' { PT _ (TS _ 8) }
  'new' { PT _ (TS _ 9) }
  'return' { PT _ (TS _ 10) }
  'super' { PT _ (TS _ 11) }
  'this.' { PT _ (TS _ 12) }
  '{' { PT _ (TS _ 13) }
  '}' { PT _ (TS _ 14) }

L_quoted { PT _ (TL $$) }


%%

String  :: { String }  : L_quoted {  $1 }

CD :: { CD }
CD : 'class' Id 'extends' Id '{' FD KD MDL '}' { AbsFfjSyntax.CDecl $2 $4 $6 $7 $8 }
FD :: { FD }
FD : {- empty -} { AbsFfjSyntax.NoneFields }
   | FD Id Id ';' { AbsFfjSyntax.OneOrMoreFieldsDecl $1 $2 $3 }
KD :: { KD }
KD : Id '(' FL ')' '{' 'super' '(' IDL ')' ';' THISATTRL ';' '}' { AbsFfjSyntax.KDecl $1 $3 $8 $11 }
FL :: { FL }
FL : EMPTYL { AbsFfjSyntax.EmptyFieldsList $1 }
   | MULTFL { AbsFfjSyntax.OneOrMoreFields $1 }
MULTFL :: { MULTFL }
MULTFL : Id Id { AbsFfjSyntax.OneField $1 $2 }
       | MULTFL ',' Id Id { AbsFfjSyntax.MoreThanOneField $1 $3 $4 }
IDL :: { IDL }
IDL : EMPTYL { AbsFfjSyntax.EmptyVarList $1 }
    | MULTID { AbsFfjSyntax.OneOrMoreVar $1 }
MULTID :: { MULTID }
MULTID : Id { AbsFfjSyntax.OneVar $1 }
       | MULTID ',' Id { AbsFfjSyntax.MoreThanOneVar $1 $3 }
THISATTRL :: { THISATTRL }
THISATTRL : {- empty -} { AbsFfjSyntax.EmptyListOfAttr }
          | THISATTRL 'this.' Id '=' Id ';' { AbsFfjSyntax.ThisAttrList $1 $3 $5 }
MDL :: { MDL }
MDL : EMPTYL { AbsFfjSyntax.EmptyMethodosList $1 }
    | MULTMETHODS { AbsFfjSyntax.OneOrMoreMethodDeclaration $1 }
MULTMETHODS :: { MULTMETHODS }
MULTMETHODS : MD { AbsFfjSyntax.OneMethod $1 }
            | MULTMETHODS MD { AbsFfjSyntax.MultMethods $1 $2 }
MD :: { MD }
MD : Id Id '(' FL ')' '{' 'return' Term ';' '}' { AbsFfjSyntax.MethodDecl $1 $2 $4 $8 }
Term :: { Term }
Term : Id { AbsFfjSyntax.TermVar $1 }
     | Term '.' Id { AbsFfjSyntax.TermFieldAccess $1 $3 }
     | Term '.' Id '(' TL ')' { AbsFfjSyntax.TermMethodInvoc $1 $3 $5 }
     | 'new' Id '(' TL ')' { AbsFfjSyntax.TermObjectCreation $2 $4 }
     | '(' Id ')' Term { AbsFfjSyntax.TermCast $2 $4 }
TL :: { TL }
TL : EMPTYL { AbsFfjSyntax.EmptyTermsList $1 }
   | MultipleTerms { AbsFfjSyntax.OneOrMoreTerms $1 }
MultipleTerms :: { MultipleTerms }
MultipleTerms : Term { AbsFfjSyntax.OneTerm $1 }
              | MultipleTerms Term { AbsFfjSyntax.MoreThanOneTerm $1 $2 }
Id :: { Id }
Id : String { AbsFfjSyntax.Identifier $1 }
EMPTYL :: { EMPTYL }
EMPTYL : {- empty -} { AbsFfjSyntax.EmptyList }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}


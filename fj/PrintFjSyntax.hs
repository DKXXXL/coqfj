{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module PrintFfjSyntax where

-- pretty-printer generated by the BNF converter

import AbsFfjSyntax
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)




instance Print CD where
  prt i e = case e of
    CDecl id1 id2 fd kd mdl -> prPrec i 0 (concatD [doc (showString "class"), prt 0 id1, doc (showString "extends"), prt 0 id2, doc (showString "{"), prt 0 fd, prt 0 kd, prt 0 mdl, doc (showString "}")])

instance Print FD where
  prt i e = case e of
    NoneFields -> prPrec i 0 (concatD [])
    OneOrMoreFieldsDecl fd id1 id2 -> prPrec i 0 (concatD [prt 0 fd, prt 0 id1, prt 0 id2, doc (showString ";")])

instance Print KD where
  prt i e = case e of
    KDecl id fl idl thisattrl -> prPrec i 0 (concatD [prt 0 id, doc (showString "("), prt 0 fl, doc (showString ")"), doc (showString "{"), doc (showString "super"), doc (showString "("), prt 0 idl, doc (showString ")"), doc (showString ";"), prt 0 thisattrl, doc (showString ";"), doc (showString "}")])

instance Print FL where
  prt i e = case e of
    EmptyFieldsList emptyl -> prPrec i 0 (concatD [prt 0 emptyl])
    OneOrMoreFields multfl -> prPrec i 0 (concatD [prt 0 multfl])

instance Print MULTFL where
  prt i e = case e of
    OneField id1 id2 -> prPrec i 0 (concatD [prt 0 id1, prt 0 id2])
    MoreThanOneField multfl id1 id2 -> prPrec i 0 (concatD [prt 0 multfl, doc (showString ","), prt 0 id1, prt 0 id2])

instance Print IDL where
  prt i e = case e of
    EmptyVarList emptyl -> prPrec i 0 (concatD [prt 0 emptyl])
    OneOrMoreVar multid -> prPrec i 0 (concatD [prt 0 multid])

instance Print MULTID where
  prt i e = case e of
    OneVar id -> prPrec i 0 (concatD [prt 0 id])
    MoreThanOneVar multid id -> prPrec i 0 (concatD [prt 0 multid, doc (showString ","), prt 0 id])

instance Print THISATTRL where
  prt i e = case e of
    EmptyListOfAttr -> prPrec i 0 (concatD [])
    ThisAttrList thisattrl id1 id2 -> prPrec i 0 (concatD [prt 0 thisattrl, doc (showString "this."), prt 0 id1, doc (showString "="), prt 0 id2, doc (showString ";")])

instance Print MDL where
  prt i e = case e of
    EmptyMethodosList emptyl -> prPrec i 0 (concatD [prt 0 emptyl])
    OneOrMoreMethodDeclaration multmethods -> prPrec i 0 (concatD [prt 0 multmethods])

instance Print MULTMETHODS where
  prt i e = case e of
    OneMethod md -> prPrec i 0 (concatD [prt 0 md])
    MultMethods multmethods md -> prPrec i 0 (concatD [prt 0 multmethods, prt 0 md])

instance Print MD where
  prt i e = case e of
    MethodDecl id1 id2 fl term -> prPrec i 0 (concatD [prt 0 id1, prt 0 id2, doc (showString "("), prt 0 fl, doc (showString ")"), doc (showString "{"), doc (showString "return"), prt 0 term, doc (showString ";"), doc (showString "}")])

instance Print Term where
  prt i e = case e of
    TermVar id -> prPrec i 0 (concatD [prt 0 id])
    TermFieldAccess term id -> prPrec i 0 (concatD [prt 0 term, doc (showString "."), prt 0 id])
    TermMethodInvoc term id tl -> prPrec i 0 (concatD [prt 0 term, doc (showString "."), prt 0 id, doc (showString "("), prt 0 tl, doc (showString ")")])
    TermObjectCreation id tl -> prPrec i 0 (concatD [doc (showString "new"), prt 0 id, doc (showString "("), prt 0 tl, doc (showString ")")])
    TermCast id term -> prPrec i 0 (concatD [doc (showString "("), prt 0 id, doc (showString ")"), prt 0 term])

instance Print TL where
  prt i e = case e of
    EmptyTermsList emptyl -> prPrec i 0 (concatD [prt 0 emptyl])
    OneOrMoreTerms multipleterms -> prPrec i 0 (concatD [prt 0 multipleterms])

instance Print MultipleTerms where
  prt i e = case e of
    OneTerm term -> prPrec i 0 (concatD [prt 0 term])
    MoreThanOneTerm multipleterms term -> prPrec i 0 (concatD [prt 0 multipleterms, prt 0 term])

instance Print Id where
  prt i e = case e of
    Identifier str -> prPrec i 0 (concatD [prt 0 str])

instance Print EMPTYL where
  prt i e = case e of
    EmptyList -> prPrec i 0 (concatD [])



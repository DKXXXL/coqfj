module FJ.SkelFjSyntax where

-- Haskell module generated by the BNF converter

import FJ.AbsFjSyntax
import FJ.ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transCD :: CD -> Result
transCD x = case x of
  CDecl id1 id2 fds kd mdl -> failure x
transFD :: FD -> Result
transFD x = case x of
  FDecl id1 id2 -> failure x
transKD :: KD -> Result
transKD x = case x of
  KDecl id fl idl thisattrl -> failure x
transFL :: FL -> Result
transFL x = case x of
  EmptyFieldsList emptyl -> failure x
  OneOrMoreFields multfl -> failure x
transMULTFL :: MULTFL -> Result
transMULTFL x = case x of
  OneField id1 id2 -> failure x
  MoreThanOneField multfl id1 id2 -> failure x
transIDL :: IDL -> Result
transIDL x = case x of
  EmptyVarList emptyl -> failure x
  OneOrMoreVar multid -> failure x
transMULTID :: MULTID -> Result
transMULTID x = case x of
  OneVar id -> failure x
  MoreThanOneVar multid id -> failure x
transTHISATTRL :: THISATTRL -> Result
transTHISATTRL x = case x of
  EmptyListOfAttr -> failure x
  ThisAttrList thisattrl id1 id2 -> failure x
transMDL :: MDL -> Result
transMDL x = case x of
  EmptyMethodosList emptyl -> failure x
  OneOrMoreMethodDeclaration multmethods -> failure x
transMULTMETHODS :: MULTMETHODS -> Result
transMULTMETHODS x = case x of
  OneMethod md -> failure x
  MultMethods multmethods md -> failure x
transMD :: MD -> Result
transMD x = case x of
  MethodDecl id1 id2 fl term -> failure x
transTerm :: Term -> Result
transTerm x = case x of
  TermVar id -> failure x
  TermFieldAccess term id -> failure x
  TermMethodInvoc term id tl -> failure x
  TermObjectCreation id tl -> failure x
  TermCast id term -> failure x
transTL :: TL -> Result
transTL x = case x of
  EmptyTermsList emptyl -> failure x
  OneOrMoreTerms multipleterms -> failure x
transMultipleTerms :: MultipleTerms -> Result
transMultipleTerms x = case x of
  OneTerm term -> failure x
  MoreThanOneTerm multipleterms term -> failure x
transId :: Id -> Result
transId x = case x of
  Identifier string -> failure x
transEMPTYL :: EMPTYL -> Result
transEMPTYL x = case x of
  EmptyList -> failure x


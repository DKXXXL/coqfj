module FJ.SkelFjSyntax where

-- Haskell module generated by the BNF converter

import FJ.AbsFjSyntax
import FJ.ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transCD :: CD -> Result
transCD x = case x of
  CDecl id1 id2 fds kd mds -> failure x
transFD :: FD -> Result
transFD x = case x of
  FDecl id1 id2 -> failure x
transKD :: KD -> Result
transKD x = case x of
  KDecl id1 fieldss id2 assignmentss -> failure x
transFields :: Fields -> Result
transFields x = case x of
  Field id1 id2 -> failure x
transID :: ID -> Result
transID x = case x of
  Id id -> failure x
transAssignments :: Assignments -> Result
transAssignments x = case x of
  Assignment id1 id2 -> failure x
transMD :: MD -> Result
transMD x = case x of
  MethodDecl id1 id2 fieldss term -> failure x
transTerm :: Term -> Result
transTerm x = case x of
  TermVar id -> failure x
  TermFieldAccess term id -> failure x
  TermMethodInvoc term id terms -> failure x
  TermObjectCreation id terms -> failure x
  TermCast id term -> failure x
transId :: Id -> Result
transId x = case x of
  Identifier string -> failure x




module FJ.AbsFjSyntax where

-- Haskell module generated by the BNF converter




data CD = CDecl Id Id [FD] KD MDL
  deriving (Eq, Ord, Show, Read)

data FD = FDecl Id Id
  deriving (Eq, Ord, Show, Read)

data KD = KDecl Id FL IDL THISATTRL
  deriving (Eq, Ord, Show, Read)

data FL = EmptyFieldsList EMPTYL | OneOrMoreFields MULTFL
  deriving (Eq, Ord, Show, Read)

data MULTFL = OneField Id Id | MoreThanOneField MULTFL Id Id
  deriving (Eq, Ord, Show, Read)

data IDL = EmptyVarList EMPTYL | OneOrMoreVar MULTID
  deriving (Eq, Ord, Show, Read)

data MULTID = OneVar Id | MoreThanOneVar MULTID Id
  deriving (Eq, Ord, Show, Read)

data THISATTRL = EmptyListOfAttr | ThisAttrList THISATTRL Id Id
  deriving (Eq, Ord, Show, Read)

data MDL
    = EmptyMethodosList EMPTYL | OneOrMoreMethodDeclaration MULTMETHODS
  deriving (Eq, Ord, Show, Read)

data MULTMETHODS = OneMethod MD | MultMethods MULTMETHODS MD
  deriving (Eq, Ord, Show, Read)

data MD = MethodDecl Id Id FL Term
  deriving (Eq, Ord, Show, Read)

data Term
    = TermVar Id
    | TermFieldAccess Term Id
    | TermMethodInvoc Term Id TL
    | TermObjectCreation Id TL
    | TermCast Id Term
  deriving (Eq, Ord, Show, Read)

data TL = EmptyTermsList EMPTYL | OneOrMoreTerms MultipleTerms
  deriving (Eq, Ord, Show, Read)

data MultipleTerms
    = OneTerm Term | MoreThanOneTerm MultipleTerms Term
  deriving (Eq, Ord, Show, Read)

data Id = Identifier String
  deriving (Eq, Ord, Show, Read)

data EMPTYL = EmptyList
  deriving (Eq, Ord, Show, Read)


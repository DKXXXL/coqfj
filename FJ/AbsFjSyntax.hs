

module FJ.AbsFjSyntax where

-- Haskell module generated by the BNF converter




data CD = CDecl Id Id [FD] KD [MD]
  deriving (Eq, Ord, Show, Read)

data FD = FDecl Id Id
  deriving (Eq, Ord, Show, Read)

data KD = KDecl Id [Fields] ID [Assignments]
  deriving (Eq, Ord, Show, Read)

data Fields = Field Id Id
  deriving (Eq, Ord, Show, Read)

data ID = Id Id
  deriving (Eq, Ord, Show, Read)

data Assignments = Assignment Id Id
  deriving (Eq, Ord, Show, Read)

data MD = MethodDecl Id Id [Fields] Term
  deriving (Eq, Ord, Show, Read)

data Term
    = TermVar Id
    | TermFieldAccess Term Id
    | TermMethodInvoc Term Id [Term]
    | TermObjectCreation Id [Term]
    | TermCast Id Term
  deriving (Eq, Ord, Show, Read)

data Id = Identifier String
  deriving (Eq, Ord, Show, Read)

